{"version":3,"sources":["Infobox.js","LineGraph.js","util.js","Map.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","active","isRed","checked","cases","total","props","Card","className","onClick","CardContent","Typography","color","options","elements","point","radius","legend","display","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","showDataOnMap","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","prettyPrintStat","stat","Map","countries","zoom","TileLayer","attribution","url","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","mapZoom","setMapZoom","name","iso2","sortedData","getCountriesData","onCountryChange","Event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58942695.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./Infobox.css\"\r\n\r\nfunction Infobox({ title,active,isRed , checked, cases, total ,...props }) {\r\n  return (\r\n    <Card className={`infobox ${active && \"infobox_selected\"} ${checked && \"infobox_dark\"} ${isRed && \"infobox_red\"}`} onClick={props.onClick} >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className=\"infobox_title \">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infobox_cases ${!isRed && \"infobox_green\"}`}>{cases}</h2>\r\n        <Typography className=\"infobox_total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Infobox;\r\n","\r\nimport numeral from \"numeral\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nconst options = {\r\n  \r\n    \r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  legend: {\r\n    display: false,\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    \r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType=\"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\nfunction LineGraph({ casesType=\"cases\",...props }) {\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(`https://disease.sh/v3/covid-19/historical/all?lastdays=120`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length>0 &&(\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                \r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nimport React from \"react\";\r\n\r\nconst casesTypeColors = {\r\n  cases:{\r\n    hex:\"#CC1034\",\r\n    multiplier:200,\r\n  },\r\n  recovered:{\r\n    hex:\"#7dd71d\",\r\n    multiplier:200,\r\n  },\r\n  deaths:{\r\n    hex:\"#fb4443\",\r\n    multiplier:1200,\r\n  }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info_container\">\r\n        <div className=\"info_flag\" style={{backgroundImage :  `url(${country.countryInfo.flag})`}} >\r\n        </div>\r\n          \r\n          <div className=\"info_name\">{country.country}</div>\r\n          <div className=\"info_confirmed\">Cases:{numeral(country.cases).format(\"0,0\")}</div>\r\n          <div className=\"info_recovered\">Recovered:{numeral(country.recovered).format(\"0,0\")}</div>\r\n          <div className=\"info_deaths\">Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\n  export const prettyPrintStat = (stat)=>(\r\n    stat?`+${numeral(stat).format('0,0a')}`:1\r\n  )","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\"\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap zoom={zoom} center={center} >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        ></TileLayer>\r\n        {showDataOnMap(countries,casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Infobox from \"./Infobox\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [checked, setChecked] = useState(false);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 23.0707, lng: 80.0982 });\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapZoom, setMapZoom] = useState(3);\n  useEffect(() => {\n    fetch(`https://disease.sh/v3/covid-19/all`)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n  const toggleChecked = () => {\n    setChecked((prev) => !prev);\n  };\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (Event) => {\n    const countryCode = Event.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? `https://disease.sh/v3/covid-19/all`\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n        setCountry(countryCode);\n      });\n  };\n  console.log(\"countryinfo>>>>>>>>\", countryInfo);\n  return (\n    <div className={`app `}>\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>Covid 19 Tracker</h1>\n          <div className=\"app_headerControls\">\n            <FormControl className={`app_dropdown`}>\n              <Select\n                className={`${checked ? \"app_darkSelect\" : \"app_select\"}`}\n                variant=\"outlined\"\n                value={country}\n                onChange={onCountryChange}\n              >\n                <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n        </div>\n          \n        <div className=\"app_stats\">\n          <Infobox\n            checked={checked}\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <Infobox\n            checked={checked}\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <Infobox\n            checked={checked}\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h2 className=\"app_graphTitle2\">Live cases by country</h2>\n          <Table countries={tableData} />\n          <h2 className=\"app_graphTitle\">Worldwide New {casesType}</h2>\n          <div className=\"whitebg app_graph\">\n          <LineGraph  casesType={casesType} checked={checked} /></div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}